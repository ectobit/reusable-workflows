on:
  workflow_call:
    inputs:
      image:
        type: string
        required: true
      registry:
        type: string
        required: false
        default: ''
      platforms:
        type: string
        required: false
        default: linux/amd64,linux/arm64
      cache-type:
        type: string
        required: false
        default: registry
      license:
        type: string
        required: false
        default: BSD-2-Clause-Patent
      vendor:
        type: string
        required: false
        default: ectobit.com
      hadolint-dockerfile:
        type: string
        required: false
        default: Dockerfile
      hadolint-ignore:
        type: string
        required: false
        default: ''
      build-args:
        type: string
        required: false
        default: ''
    secrets:
      container-registry-username:
        required: true
      container-registry-password:
        required: true
    outputs:
      sha-tag:
        description: image short sha tag
        value: ${{ jobs.build.outputs.sha-tag }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      sha-tag: ${{ steps.tags.outputs.sha-tag }}
    steps:
      - name: Check out
        uses: actions/checkout@v3
      - name: Lint Dockerfile with ignore
        if: ${{ inputs.hadolint-ignore != ''}}
        uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: ${{ inputs.hadolint-dockerfile }}
          ignore: ${{ inputs.hadolint-ignore }}
      - name: Lint Dockerfile
        if: ${{ inputs.hadolint-ignore == ''}}
        uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: ${{ inputs.hadolint-dockerfile }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.0.0
      - name: Set up tags
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ inputs.image }}
          labels: |
            org.opencontainers.image.licenses=${{ inputs.license }}
            org.opencontainers.image.vendor=${{ inputs.vendor }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=edge
            type=sha
      - name: Output short tag
        id: tags
        run: |
          echo "::set-output name=sha-tag::sha-$(echo ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }} | cut -c1-7)"
      - name: Login to container registry
        uses: docker/login-action@v2.0.0
        if: ${{ inputs.registry == ''}}
        with:
          username: ${{ secrets.container-registry-username }}
          password: ${{ secrets.container-registry-password }}
      - name: Login to ${{ inputs.registry }} container registry
        uses: docker/login-action@v2.0.0
        if: ${{ inputs.registry != ''}}
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.container-registry-username }}
          password: ${{ secrets.container-registry-password }}
      - name: Build and push image to container registry using ${{ inputs.cache-type }} cache
        uses: docker/build-push-action@v3.0.0
        if: ${{ inputs.cache-type == 'registry' && inputs.build-args == '' }}
        with:
          platforms: ${{ inputs.platforms }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ inputs.image }}:buildcache
          cache-to: type=registry,ref=${{ inputs.image }}:buildcache,mode=max
      - name: Build and push image with build args ${{ inputs.build-args }} to container registry using ${{ inputs.cache-type }} cache
        uses: docker/build-push-action@v3.0.0
        if: ${{ inputs.cache-type == 'registry' && inputs.build-args != '' }}
        with:
          build-args: ${{ inputs.build-args }}
          platforms: ${{ inputs.platforms }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ inputs.image }}:buildcache
          cache-to: type=registry,ref=${{ inputs.image }}:buildcache,mode=max
      - name: Build and push image to container registry using ${{ inputs.cache-type }} cache
        uses: docker/build-push-action@v3.0.0
        if: ${{ inputs.cache-type == 'gha' && inputs.build-args == '' }}
        with:
          platforms: ${{ inputs.platforms }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build and push image with build args ${{ inputs.build-args }} to container registry using ${{ inputs.cache-type }} cache
        uses: docker/build-push-action@v3.0.0
        if: ${{ inputs.cache-type == 'gha' && inputs.build-args != '' }}
        with:
          build-args: ${{ inputs.build-args }}
          platforms: ${{ inputs.platforms }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
