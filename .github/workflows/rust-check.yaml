on:
  workflow_call:
    inputs:
      rust-version:
        type: string
        required: false
        default: nightly
      sccache-version:
        type: string
        required: false
        default: v0.3.0
      sccache-size:
        type: string
        required: false
        default: 2G
      sccache-recache:
        type: string
        required: false
        default: '0' # set to 1 to refresh cache
      hadolint:
        type: boolean
        required: false
      hadolint-dockerfile:
        type: string
        required: false
        default: Dockerfile
      hadolint-ignore:
        type: string
        required: false
        default: ''

jobs:
  check:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: ${{ inputs.sccache-size }}
      SCCACHE_RECACHE: ${{ inputs.sccache-recache }}
    steps:
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ inputs.rust-version }}
          override: true
          components: rustfmt, clippy

      - name: Install sccache
        run: |
          SCCACHE_FILE=sccache-${{ inputs.sccache-version }}-x86_64-unknown-linux-musl
          curl -L "https://github.com/mozilla/sccache/releases/download/${{ inputs.sccache-version }}/$SCCACHE_FILE.tar.gz" | tar xz
          mkdir -p ~/.local/bin
          mv -f "$SCCACHE_FILE/sccache" ~/.local/bin/sccache
          chmod +x ~/.local/bin/sccache
          echo ~/.local/bin >> $GITHUB_PATH

      - name: Check out
        uses: actions/checkout@v3

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Set up sccache cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-sccache-

      - name: Start sccache server
        run: sccache --start-server

      - name: Lint
        run: |
          cargo fmt --all -- --check
          cargo clippy -- -D warnings

      - name: Install check deps
        run: |
          which cargo-deny || cargo install --locked cargo-deny
          which cargo-outdated || cargo install --locked cargo-outdated
          which cargo-udeps || cargo install --locked cargo-udeps
          which cargo-audit || cargo install --locked cargo-audit
          which cargo-pants || cargo install --locked cargo-pants

      - name: Check
        run: |
          cargo deny check
          cargo outdated --exit-code 1
          cargo +nightly udeps
          rm -rf ~/.cargo/advisory-db
          cargo audit
          cargo pants

      - name: Print sccache stats
        if: always()
        run: sccache --show-stats

      - name: Stop sccache server
        if: always()
        run: sccache --stop-server || true

      - name: Lint Dockerfile with ignore
        if: ${{ inputs.hadolint && inputs.hadolint-ignore != ''}}
        uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: ${{ inputs.hadolint-dockerfile }}
          ignore: ${{ inputs.hadolint-ignore }}

      - name: Lint Dockerfile
        if: ${{ inputs.hadolint && inputs.hadolint-ignore == ''}}
        uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: ${{ inputs.hadolint-dockerfile }}
