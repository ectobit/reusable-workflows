on:
  workflow_call:
    inputs:
      rust-version:
        type: string
        required: false
        default: nightly
      sccache-version:
        type: string
        required: false
        default: v0.3.0
      sccache-size:
        type: string
        required: false
        default: 2G

jobs:
  check:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: ${{ inputs.sccache-size }}
      SCCACHE_DIR: ~/.cache/sccache
      # SCCACHE_RECACHE: 1 # uncomment to refresh cache
    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ inputs.rust-version }}
          override: true
          components: rustfmt, clippy

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Check if sccache installed
        id: sccache
        run: |
          if [ -f ~/.cargo/bin/sccache ]; then
            echo '::set-output name=installed::true'
          else
            echo '::set-output name=installed::false'
          fi

      - name: Install sccache
        if: ${{ steps.sccache.outputs.installed == 'false' }}
        run: |
          SCCACHE_FILE=sccache-${{ inputs.sccache-version }}-x86_64-unknown-linux-musl
          curl -L "https://github.com/mozilla/sccache/releases/download/${{ inputs.sccache-version }}/$SCCACHE_FILE.tar.gz" | tar xz
          install -m 755 "$SCCACHE_FILE/sccache" ~/.cargo/bin

      - name: Set up sccache cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: ${{ env.SCCACHE_DIR }}
          key: ${{ runner.os }}-sccache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-sccache-

      - name: Start sccache server
        run: sccache --start-server

      - name: Lint
        run: |
          cargo fmt --all -- --check
          cargo clippy -- -D warnings

      - name: Install cargo check tools
        run: |
          cargo install --locked cargo-deny || true
          cargo install --locked cargo-outdated || true
          cargo install --locked cargo-udeps || true
          cargo install --locked cargo-audit || true

      - name: Check
        run: |
          cargo deny check
          cargo outdated --exit-code 1
          cargo udeps
          rm -rf ~/.cargo/advisory-db
          cargo audit
          cargo pants

      - name: Stop sccache server
        if: always()
        run: sccache --stop-server || true
